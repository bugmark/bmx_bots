#!/usr/bin/env ruby

require 'json'

PROCNAME = "buy_bot_cli"
Process.setproctitle(PROCNAME)

puts "----- BUGMARK OFFER BOT -------------------------------------------"
puts "START #{Time.now} | C-c to exit"
puts "Process Name: #{PROCNAME}"

WEEK_ENDS = JSON.parse(`bmx host next_week_ends --strftime=%Y%m%d_%H%M`)
USER_IDS  = JSON.parse(`bmx user list --with_email=test`).map {|el| el["email"]}
ISSUE_IDS = JSON.parse(`bmx issue list --limit=3`).map {|el| el["uuid"]}
VOLUMES   = (30..50).step(5).to_a
PRICES    = (5..95).step(5).to_a.map {|x| x / 100.0}
count     = 0

# for C-c
trap "SIGINT" do
  puts "\nExiting"
  exit 130
end

# for "pkill -f bot_buy"
trap "SIGTERM" do
  puts "TERMINATED #{Time.now}"
  STDOUT.flush
  exit 130
end

def buy
  opts = {
    userspec:   USER_IDS.sample + ":bugmark" ,
    volume:     VOLUMES.sample               ,
    price:      PRICES.sample                ,
    issue:      ISSUE_IDS.sample             ,
    side:       %w(fixed unfixed).sample     ,
    maturation: WEEK_ENDS.sample
  }
  flags = opts.keys.map {|k| "--#{k}=#{opts[k]}"}.join(' ')
  cmd = "bmx offer create_buy #{flags}"
  `#{cmd}`
end

def cross
  print "Crossing"
  offers = JSON.parse(`bmx offer list --with_type=Buy --with_status=open`).map {|el| el["uuid"]}
  offers.each do |uuid|
    cmd = "bmx contract cross #{uuid} --commit-type=expand"
    # puts cmd
    `#{cmd}`
    print '.'
  end
  puts '.'
end

def pa(el)
  el.to_s.rjust(2, "0")
end

HF_MAX  = 20    # High-Frequency Cycle Threshold
CYC_MAX = 100   # Max Number of Cycles

while true do
  count += 1
  time  = Time.now.strftime("%H:%M:%S")
  chash = JSON.parse(`bmx host counts`)
  puts "Cycle: #{pa count} | #{time} | #{pa chash["bu_offers"] + chash["bf_offers"]} open offers | #{pa chash["contracts"]} contracts | #{pa chash["escrows"]} escrows"
  STDOUT.flush
  if count < HF_MAX
    sleep 5
  else
    sleep 20
  end
  buy
  cross if count % 2 == 0
  STDOUT.flush
  abort "Terminating after #{CYC_MAX} cycles #{Time.now}" if count == CYC_MAX
end
